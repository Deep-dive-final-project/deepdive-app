export const taskQnA = [
  {
    taskId: 1,
    question: "전역 스타일을 설정하는 방법은?",
    submittedAnswer: "CSS 파일을 import한다.",
    isCorrect: false,
    explanation: "전역 스타일은 styled-components 또는 CSS-in-JS로 관리하는 것이 좋습니다.",
  },
  {
    taskId: 2,
    question: "로그인 폼에서 유효성 검사는 왜 중요한가?",
    submittedAnswer: "안 중요하다.",
    isCorrect: false,
    explanation: "유효성 검사는 잘못된 입력을 방지하기 위해 필수입니다.",
  },
  {
    taskId: 3,
    question: "반응형 레이아웃을 styled-components로 구현하는 방법은?",
    submittedAnswer: "미디어 쿼리를 사용한다.",
    isCorrect: true,
    explanation: "styled-components에서 미디어 쿼리를 활용해 반응형 디자인을 적용할 수 있습니다.",
  },
  {
    taskId: 4,
    question: "더미 데이터로 로그인 기능을 테스트하는 이유는?",
    submittedAnswer: "서버 구축 전에 테스트하기 위해서다.",
    isCorrect: true,
    explanation: "백엔드 없이도 기능 테스트를 할 수 있습니다.",
  },
  {
    taskId: 5,
    question: "프로필 페이지에서 어떤 데이터를 관리해야 하나?",
    submittedAnswer: "이름과 이메일만 필요하다.",
    isCorrect: false,
    explanation: "사용자의 다양한 정보를 관리할 수 있어야 합니다.",
  },
  {
    taskId: 6,
    question: "Next.js 프로젝트의 초기 설정에서 중요한 점은?",
    submittedAnswer: "라우팅 설정이다.",
    isCorrect: true,
    explanation: "Next.js의 파일 기반 라우팅을 올바르게 설정하는 것이 중요합니다.",
  },
  {
    taskId: 7,
    question: "데이터 패칭에서 가장 주의해야 할 점은?",
    submittedAnswer: "API 호출 횟수를 줄인다.",
    isCorrect: true,
    explanation: "불필요한 API 호출을 최소화하는 것이 성능에 중요합니다.",
  },
  {
    taskId: 8,
    question: "SEO 최적화의 중요한 요소는?",
    submittedAnswer: "Head 태그에 메타 데이터를 추가한다.",
    isCorrect: true,
    explanation: "Next.js에서 Head 컴포넌트를 사용해 SEO를 최적화할 수 있습니다.",
  },
  {
    taskId: 9,
    question: "API Routes를 사용하는 이유는?",
    submittedAnswer: "프론트엔드에서 서버 없이 데이터를 주고받기 위해서다.",
    isCorrect: true,
    explanation: "Next.js API Routes를 사용해 백엔드 없이 API 엔드포인트를 설정할 수 있습니다.",
  },
  {
    taskId: 10,
    question: "React Query를 사용할 때의 장점은?",
    submittedAnswer: "비동기 데이터 관리가 편리하다.",
    isCorrect: true,
    explanation: "React Query는 서버 상태를 쉽게 관리할 수 있게 해줍니다.",
  },
  {
    taskId: 11,
    question: "Redux에서 전역 상태를 설정하는 방법은?",
    submittedAnswer: "createStore를 사용한다.",
    isCorrect: true,
    explanation: "Redux에서 createStore를 사용해 전역 상태를 설정합니다.",
  },
  {
    taskId: 12,
    question: "Redux-saga는 무엇을 위한 도구인가?",
    submittedAnswer: "비동기 액션 처리를 위해서다.",
    isCorrect: true,
    explanation: "Redux-saga는 비동기 로직을 쉽게 관리할 수 있습니다.",
  },
  {
    taskId: 13,
    question: "로그인 상태를 Redux에서 관리하는 이유는?",
    submittedAnswer: "상태 관리를 중앙화하기 위해서다.",
    isCorrect: true,
    explanation: "전역 상태에서 로그인 상태를 관리하면 일관된 UI를 유지할 수 있습니다.",
  },
  {
    taskId: 14,
    question: "Redux DevTools의 역할은?",
    submittedAnswer: "상태를 시각적으로 확인하는 것이다.",
    isCorrect: true,
    explanation: "Redux DevTools는 상태 변화를 쉽게 추적할 수 있게 도와줍니다.",
  },
  {
    taskId: 15,
    question: "상태 관리에서 서버와 연동 시 중요한 것은?",
    submittedAnswer: "오류 처리이다.",
    isCorrect: true,
    explanation: "서버 연동 시 오류 처리를 철저히 해야 안정적인 앱을 만들 수 있습니다.",
  },
];
